{
	"": [
		"--------------------------------------------------------------------------------------------",
		"Copyright (c) Microsoft Corporation. All rights reserved.",
		"Licensed under the MIT License. See License.txt in the project root for license information.",
		"--------------------------------------------------------------------------------------------",
		"Do not edit this file. It is machine generated."
	],
	"version": "1.0.0",
	"contents": {
		"package": {
			"displayName": "Возможности языков TypeScript и JavaScript",
			"description": "Предоставляет широкую поддержку языка для JavaScript и TypeScript.",
			"reloadProjects.title": "Перезагрузить проект",
			"configuration.typescript": "TypeScript",
			"configuration.suggest.completeFunctionCalls": "Дополните функции сигнатурами их параметров.",
			"configuration.suggest.includeAutomaticOptionalChainCompletions": "Включение/отключение отображения завершений для потенциально неопределенных значений, вставляющих необязательный вызов по цепочке. Требует наличие TS 3.7+ и включение строгих проверок на NULL.",
			"typescript.tsdk.desc": "Указывает путь к файлам tsserver и lib*.d.ts в установке TypeScript, используемой для IntelliSense, например: ./node_modules/typescript/lib.\r\n\r\n— При указании в качестве пользовательского параметра версия TypeScript из файла typescript.tsdk автоматически заменяет встроенную версию TypeScript.\r\n— При указании в качестве параметра рабочей области typescript.tsdk позволяет переключиться на использование этой версии рабочей области TypeScript для IntelliSense с помощью команды \"TypeScript: выберите версию TypeScript\".\r\n\r\nДополнительные сведения об управлении версиями TypeScript см. в [документации по TypeScript](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions).",
			"typescript.disableAutomaticTypeAcquisition": "Отключает автоматическое получение типа. При автоматическом получении типа выполняется получение пакетов \"@types\" из npm для улучшения работы IntelliSense для внешних библиотек.",
			"typescript.enablePromptUseWorkspaceTsdk": "Включает вывод пользователям запросов на использование версии TypeScript, настроенной в рабочей области для IntelliSense.",
			"typescript.tsserver.enableTracing": "Включает трассировку производительности сервера TS в каталог. Эти файлы трассировки можно использовать для диагностики проблем с производительностью сервера TS. В журнале могут содержаться пути к файлам, исходный код и другие сведения из вашего проекта, в том числе носящие конфиденциальный характер.",
			"typescript.tsserver.log": "Включает ведение журнала для сервера TS. Этот журнал можно использовать для диагностики проблем сервера TS. В журнале могут содержаться пути к файлам, исходный код и другие сведения из вашего проекта, в том числе носящие конфиденциальный характер.",
			"typescript.tsserver.pluginPaths": "Дополнительные пути для обнаружения подключаемых модулей языковой службы TypeScript.",
			"typescript.tsserver.pluginPaths.item": "Абсолютный или относительный путь. Относительный путь должен быть указан относительно папок рабочей области.",
			"typescript.tsserver.trace": "Включает трассировку сообщений, отправляемых на сервер TS. Эту трассировку можно использовать для диагностики проблем сервера TS. Трассировка может содержать пути к файлам, исходный код и другие сведения из вашего проекта, в том числе конфиденциальные данные.",
			"typescript.validate.enable": "Включение или отключение проверки TypeScript.",
			"typescript.format.enable": "Включение или отключение модуля форматирования TypeScript по умолчанию.",
			"javascript.format.enable": "Включение или отключение модуля форматирования JavaScript по умолчанию.",
			"format.insertSpaceAfterCommaDelimiter": "Определяет метод обработки пробелов после разделителя-запятой.",
			"format.insertSpaceAfterConstructor": "Определяет метод обработки пробелов после ключевого слова constructor.",
			"format.insertSpaceAfterSemicolonInForStatements": "Определяет метод обработки пробелов после точки с запятой в операторе for.",
			"format.insertSpaceBeforeAndAfterBinaryOperators": "Определяет метод обработки пробелов после двоичного оператора.",
			"format.insertSpaceAfterKeywordsInControlFlowStatements": "Определяет метод обработки пробелов после ключевых слов в операторе управления потоком выполнения.",
			"format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": "Определяет метод обработки пробелов после ключевого слова function у анонимных функций.",
			"format.insertSpaceBeforeFunctionParenthesis": "Определяет метод обработки пробелов перед скобками аргумента функции.",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": "Определяет метод обработки пробелов после открытия и до закрытия непустых круглых скобок.",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": "Определяет метод обработки пробелов после открытия и до закрытия непустых квадратных скобок.",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": "Определяет метод обработки пробелов после открытия и до закрытия непустых квадратных скобок.",
			"format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": "Определяет обработку пробелов после открывающей и перед закрывающей пустыми фигурными скобками.",
			"format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": "Определяет метод обработки пробелов после открытия и до закрытия скобок в строке шаблона.",
			"format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": "Определяет метод обработки пробелов после открытия и до закрытия скобок выражения JSX.",
			"format.insertSpaceAfterTypeAssertion": "Определяет метод обработки пробелов после утверждений типа в TypeScript.",
			"format.placeOpenBraceOnNewLineForFunctions": "Определяет, ставится ли открывающая фигурная скобка с новой строки в функциях.",
			"format.placeOpenBraceOnNewLineForControlBlocks": "Определяет, ставится ли открывающая фигурная скобка с новой строки в блоках управления.",
			"format.semicolons": "Определяет обработку необязательных точек с запятой. Требует использования TypeScript 3.7 или более новой версии в рабочей области.",
			"format.semicolons.ignore": "Не вставлять и не удалять точки с запятой.",
			"format.semicolons.insert": "Вставка запятых в конце оператора.",
			"format.semicolons.remove": "Удалите ненужные запятые.",
			"javascript.validate.enable": "Включение или отключение проверки JavaScript.",
			"goToProjectConfig.title": "Перейти к конфигурации проекта",
			"javascript.referencesCodeLens.enabled": "Включить/отключить ссылки CodeLens для файлов JavaScript.",
			"javascript.referencesCodeLens.showOnAllFunctions": "Включить/отключить ссылки CodeLens для всех функций в файлах JavaScript.",
			"typescript.referencesCodeLens.enabled": "Включить/отключить ссылки CodeLens для файлов TypeScript.",
			"typescript.referencesCodeLens.showOnAllFunctions": "Включить/отключить ссылки CodeLens для всех функций в файлах TypeScript.",
			"typescript.implementationsCodeLens.enabled": "Включить или отключить CodeLens для реализаций. В этом CodeLens отображаются реализации интерфейса.",
			"typescript.openTsServerLog.title": "Открыть журнал сервера TS",
			"typescript.restartTsServer": "Перезапустить сервер TS",
			"typescript.selectTypeScriptVersion.title": "Выберите версию TypeScript...",
			"typescript.reportStyleChecksAsWarnings": "Отображать ошибки при проверке стиля в виде предупреждений.",
			"typescript.npm": "Указывает путь к исполняемому файлу NPM, используемому для автоматического получения типа.",
			"typescript.check.npmIsInstalled": "Проверяет, установлен ли NPM для автоматического получения типов.",
			"configuration.suggest.names": "Включение/отключение добавления уникальных имен из файла в предложения JavaScript. Обратите внимание, что предложения имен всегда отключены в коде JavaScript, семантика которого проверяется с помощью \"@ts-check\" или \"checkJs\".",
			"typescript.tsc.autoDetect": "Управляет автоматическим обнаружением заданий tsc.",
			"typescript.tsc.autoDetect.off": "Отключить эту функцию.",
			"typescript.tsc.autoDetect.on": "Создавать задачи сборки и просмотра.",
			"typescript.tsc.autoDetect.build": "Создавать только задачи компиляции для однократного запуска.",
			"typescript.tsc.autoDetect.watch": "Создавать только задачи компиляции и просмотра.",
			"typescript.problemMatchers.tsc.label": "Проблемы TypeScript",
			"typescript.problemMatchers.tscWatch.label": "Проблемы TypeScript (режим наблюдения)",
			"configuration.suggest.paths": "Включить/отключить предложения для путей в выражениях импорта и в вызовах.",
			"configuration.tsserver.useSeparateSyntaxServer": "Включение/отключение порождения отдельного сервера TypeScript, который может оперативнее реагировать на операции, связанные с синтаксисом, такие как вычисление свертывания или символов документа. Требует, чтобы в рабочей области использовался TypeScript 3.4.0 или более новой версии.",
			"configuration.tsserver.maxTsServerMemory": "Задайте максимальный объем памяти (в МБ), выделяемый для процесса сервера TypeScript",
			"configuration.tsserver.experimental.enableProjectDiagnostics": "(Экспериментальная функция) Включает ведение отчетов об ошибках в масштабе всего проекта.",
			"typescript.locale": "Устанавливает языковой стандарт, используемый для сообщений об ошибках JavaScript и TypeScript. Значение по умолчанию — \"null\". При указании значения null используется языковой стандарт VS Code.",
			"configuration.implicitProjectConfig.checkJs": "Включение или отключение семантической проверки файлов JavaScript. Этот параметр переопределяется файлом \"jsconfig.json\" или \"tsconfig.json\".",
			"configuration.javascript.checkJs.checkJs.deprecation": "Этот параметр устарел. Вместо него следует использовать \"js/ts.implicitProjectConfig.checkJs\".",
			"configuration.implicitProjectConfig.experimentalDecorators": "Включение или отключение параметра \"experimentalDecorators\" в файлах JavaScript, которые не являются частью проекта. Этот параметр переопределяется файлом \"jsconfig.json\" или \"tsconfig.json\".",
			"configuration.javascript.checkJs.experimentalDecorators.deprecation": "Этот параметр устарел. Вместо него следует использовать \"js/ts.implicitProjectConfig.experimentalDecorators\".",
			"configuration.implicitProjectConfig.strictNullChecks": "Включение или отключение [строгих проверок значения NULL](https://www.typescriptlang.org/tsconfig#strictNullChecks) в файлах JavaScript и TypeScript, которые не являются частью проекта. Этот параметр переопределяется файлом \"jsconfig.json\" или \"tsconfig.json\".",
			"configuration.implicitProjectConfig.strictFunctionTypes": "Включение или отключение [строгих типов функций](https://www.typescriptlang.org/tsconfig#strictFunctionTypes) в файлах JavaScript и TypeScript, которые не являются частью проекта. Этот параметр переопределяется файлом \"jsconfig.json\" или \"tsconfig.json\".",
			"configuration.suggest.autoImports": "Включить или отключить предложения автоимпорта.",
			"taskDefinition.tsconfig.description": "Файл tsconfig, который определяет сборку TS.",
			"javascript.suggestionActions.enabled": "Включить или отключить предложения диагностики для файлов JavaScript в редакторе.",
			"typescript.suggestionActions.enabled": "Включить или отключить предложения диагностики для файлов TypeScript в редакторе.",
			"typescript.preferences.quoteStyle": "Предпочтительный стиль кавычек для быстрых исправлений. Допустимые значения: \"single\" (одинарные кавычки), \"double\" (двойные кавычки) и \"auto\" (использовать тип кавычек из существующих операций импорта).",
			"typescript.preferences.importModuleSpecifier": "Предпочтительный стиль пути для автоматического импорта.",
			"typescript.preferences.importModuleSpecifier.shortest": "Предпочитать неотносительный импорт, только если доступен неотносительный импорт с меньшим числом сегментов пути, чем у относительного импорта.",
			"typescript.preferences.importModuleSpecifier.relative": "Предпочитать относительный путь к расположению импортируемого файла.",
			"typescript.preferences.importModuleSpecifier.nonRelative": "Предпочитать неотносительный импорт на основе \"baseUrl\" или \"paths\", заданных в файле jsconfig.json/tsconfig.json.",
			"typescript.preferences.importModuleSpecifier.projectRelative": "Предпочитать неотносительный импорт, только если путь относительного импорта выходит за пределы каталога пакета или проекта. Требуется использование TypeScript 4.2 или более поздней версии в рабочей области.",
			"typescript.preferences.importModuleSpecifierEnding": "Предпочтительное окончание пути для автоматического импорта.",
			"typescript.preferences.importModuleSpecifierEnding.auto": "Используйте параметры проекта для выбора значения по умолчанию.",
			"typescript.preferences.importModuleSpecifierEnding.minimal": "Сократить `./component/index.js` до `./component`.",
			"typescript.preferences.importModuleSpecifierEnding.index": "Сокращение \"./component/index.js\" до \"./component/index\".",
			"typescript.preferences.importModuleSpecifierEnding.js": "Не сокращайте окончания пути, включите расширение \".js\".",
			"typescript.preferences.includePackageJsonAutoImports": "Включение или выключение поиска зависимостей \"package.json\" для доступных операций автоматического импорта.",
			"typescript.preferences.includePackageJsonAutoImports.auto": "Поиск зависимостей на основе приблизительного влияния на производительность.",
			"typescript.preferences.includePackageJsonAutoImports.on": "Всегда искать зависимости.",
			"typescript.preferences.includePackageJsonAutoImports.off": "Никогда не искать зависимости.",
			"typescript.updateImportsOnFileMove.enabled": "Включить или отключить автоматическое обновление путей импорта при переименовании или перемещении файла в VS Code.",
			"typescript.updateImportsOnFileMove.enabled.prompt": "Выдавать запрос при каждом переименовании.",
			"typescript.updateImportsOnFileMove.enabled.always": "Всегда обновлять пути автоматически.",
			"typescript.updateImportsOnFileMove.enabled.never": "Никогда не переименовывать пути и не выдавать запрос на переименование.",
			"typescript.autoClosingTags": "Включить или отключить автоматическое закрытие тегов JSX.",
			"typescript.suggest.enabled": "Включить/отключить предложения автозаполнения.",
			"configuration.surveys.enabled": "Включить/отключить периодические опросы, которые помогают нам улучшить поддержку JavaScript и TypeScript в VS Code.",
			"configuration.suggest.completeJSDocs": "Включить/отключить предложение для завершения комментариев JSDoc.",
			"configuration.tsserver.watchOptions": "Настройка того, какие стратегии наблюдения следует использовать для отслеживания файлов и каталогов. Требует использования TypeScript 3.8+ в рабочей области.",
			"configuration.tsserver.watchOptions.watchFile": "Стратегия просмотра отдельных файлов.",
			"configuration.tsserver.watchOptions.watchFile.fixedPollingInterval": "Проверка каждого файла на предмет изменений несколько раз в секунду с фиксированным интервалом.",
			"configuration.tsserver.watchOptions.watchFile.priorityPollingInterval": "Проверка каждого файла на наличие изменений несколько раз в секунду, но с использованием эвристики, чтобы проверять определенные типы файлов реже, чем другие.",
			"configuration.tsserver.watchOptions.watchFile.dynamicPriorityPolling": "Используйте динамическую очередь, где чем реже изменяются файлы, тем реже они проверяются.",
			"configuration.tsserver.watchOptions.watchFile.useFsEvents": "Попытка использовать собственные события операционной или файловой системы для изменений файлов.",
			"configuration.tsserver.watchOptions.watchFile.useFsEventsOnParentDirectory": "Попытка использования собственных событий операционной системы/файловой системы для наблюдения каталогов, содержащих файл, на предмет изменений. Такой подход позволяет использовать меньше наблюдателей файлов, но может оказаться менее точным.",
			"configuration.tsserver.watchOptions.watchDirectory": "Стратегия того, как все деревья каталога отображаются в системах, где нет рекурсивной функции просмотра файлов.",
			"configuration.tsserver.watchOptions.watchDirectory.fixedPollingInterval": "Проверка каждого каталога на наличие изменений несколько раз в секунду с фиксированным интервалом.",
			"configuration.tsserver.watchOptions.watchDirectory.dynamicPriorityPolling": "Используйте динамическую очередь, где чем реже изменяются каталоги, тем реже они проверяются.",
			"configuration.tsserver.watchOptions.watchDirectory.useFsEvents": "Попытка использовать собственные события операционной или файловой системы для изменения каталога.",
			"configuration.tsserver.watchOptions.fallbackPolling": "При использовании событий файловой системы этот параметр указывает стратегию опроса, используемую, когда система исчерпывает запас собственных наблюдателей файлов и (или) не поддерживает собственные наблюдатели файлов.",
			"configuration.tsserver.watchOptions.fallbackPolling.fixedPollingInterval": "Проверка каждого файла на наличие изменений несколько раз в секунду с фиксированным интервалом.",
			"configuration.tsserver.watchOptions.fallbackPolling.priorityPollingInterval": "Проверка каждого файла на наличие изменений несколько раз в секунду, но с использованием эвристики, чтобы проверять определенные типы файлов реже, чем другие.",
			"configuration.tsserver.watchOptions.fallbackPolling.dynamicPriorityPolling ": "Используйте динамическую очередь, где чем реже изменяются файлы, тем реже они проверяются.",
			"configuration.tsserver.watchOptions.synchronousWatchDirectory": "Отключение отложенного наблюдения за каталогами. Отложенное наблюдение удобно, когда одновременно может иметь место множество изменений (например, изменение node_modules из запущенной установки npm), однако для некоторых менее распространенных вариантов настройки этот флаг может потребоваться отключить.",
			"typescript.preferences.renameShorthandProperties.deprecationMessage": "Параметр typescript.preferences.renameShorthandProperties объявлен нерекомендуемым, вместо него следует использовать typescript.preferences.useAliasesForRenames",
			"typescript.preferences.useAliasesForRenames": "Включение или отключение введения псевдонимов для собирательных свойств объекта во время переименований. Требуется использование TypeScript 3.4 или более поздней версии в рабочей области.",
			"typescript.workspaceSymbols.scope": "Определяет, какие файлы ищутся при [переходе к символу в рабочей среде](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name).",
			"typescript.workspaceSymbols.scope.allOpenProjects": "Поиск символов во всех открытых проектах JavaScript и TypeScript. Требуется использовать TypeScript 3.9 или более поздней версии в рабочей области.",
			"typescript.workspaceSymbols.scope.currentProject": "Поиск символов только в текущем проекте JavaScript или TypeScript.",
			"codeActions.refactor.extract.constant.title": "Извлечь константу",
			"codeActions.refactor.extract.constant.description": "Извлечь выражение в константу.",
			"codeActions.refactor.extract.function.title": "Извлечь функцию",
			"codeActions.refactor.extract.function.description": "Извлечь выражение в метод или функцию.",
			"codeActions.refactor.extract.type.title": "Извлечь тип",
			"codeActions.refactor.extract.type.description": "Извлечь тип в псевдоним типа.",
			"codeActions.refactor.extract.interface.title": "Извлечь интерфейс",
			"codeActions.refactor.extract.interface.description": "Извлечь тип в интерфейс.",
			"codeActions.refactor.rewrite.import.title": "Преобразовать импорт",
			"codeActions.refactor.rewrite.import.description": "Преобразование между именованными импортами и импортами пространств имен.",
			"codeActions.refactor.rewrite.export.title": "Преобразовать экспорт",
			"codeActions.refactor.rewrite.export.description": "Преобразовать между экспортом по умолчанию и именованным экспортом.",
			"codeActions.refactor.move.newFile.title": "Переместить в новый файл",
			"codeActions.refactor.move.newFile.description": "Переместить выражение в новый файл.",
			"codeActions.refactor.rewrite.arrow.braces.title": "Перезаписать угловые скобки",
			"codeActions.refactor.rewrite.arrow.braces.description": "Добавить или удалить скобки в функции стрелки.",
			"codeActions.refactor.rewrite.parameters.toDestructured.title": "Преобразовать параметры в деструктурированный объект",
			"codeActions.refactor.rewrite.property.generateAccessors.title": "Создать методы доступа",
			"codeActions.refactor.rewrite.property.generateAccessors.description": "Создать методы доступа get и set",
			"codeActions.source.organizeImports.title": "Организация импортов",
			"typescript.findAllFileReferences": "Найти ссылки на файлы"
		},
		"dist/utils/api": {
			"invalidVersion": "Недопустимая версия"
		},
		"dist/utils/tsconfig": {
			"typescript.configureTsconfigQuickPick": "Настроить tsconfig.json",
			"typescript.configureJsconfigQuickPick": "Настроить jsconfig.json",
			"typescript.noTypeScriptProjectConfig": "Файл не является частью проекта TypeScript. Дополнительные сведения см. [здесь]({0}).",
			"typescript.noJavaScriptProjectConfig": "Файл не является частью проекта JavaScript. Дополнительные сведения см. [здесь]({0}).",
			"typescript.projectConfigNoWorkspace": "Откройте папку в VS Code, чтобы использовать проект JavaScript или TypeScript.",
			"typescript.projectConfigUnsupportedFile": "Не удалось определить проект TypeScript или JavaScript. Неподдерживаемый тип файла",
			"typescript.projectConfigCouldNotGetInfo": "Не удалось определить проект TypeScript или JavaScript."
		},
		"dist/languageFeatures/codeLens/baseCodeLensProvider": {
			"referenceErrorLabel": "Не удалось определить ссылки."
		},
		"dist/languageFeatures/codeLens/implementationsCodeLens": {
			"oneImplementationLabel": "1 реализация",
			"manyImplementationLabel": "Реализаций: {0}"
		},
		"dist/languageFeatures/codeLens/referencesCodeLens": {
			"oneReferenceLabel": "1 ссылка",
			"manyReferenceLabel": "Ссылок: {0}"
		},
		"dist/languageFeatures/completions": {
			"selectCodeAction": "Выберите применяемое действие кода",
			"acquiringTypingsLabel": "Получение typings...",
			"acquiringTypingsDetail": "Получение определений typings для IntelliSense.",
			"autoImportLabel": "Автоматический импорт из {0}"
		},
		"dist/languageFeatures/directiveCommentCompletions": {
			"ts-check": "Включает семантическую проверку в JavaScript файле. Необходимо расположить в самом начале файла.",
			"ts-nocheck": "Отключает семантическую проверку в JavaScript файле. Необходимо расположить в самом начале файла.",
			"ts-ignore": "Отключает вывод ошибок @ts-check для следующей строки файла.",
			"ts-expect-error": "Подавляет ошибки @ts-check на следующей строке файла, ожидая, что по меньшей мере одна из них будет существовать."
		},
		"dist/languageFeatures/fileReferences": {
			"error.unsupportedVersion": "Не удалось найти ссылки на файлы. Требуется TypeScript версии 4.2 или более поздних версий.",
			"error.noResource": "Не удалось найти ссылки на файлы. Не указаны ресурсы.",
			"error.unsupportedLanguage": "Не удалось найти ссылки на файлы. Неподдерживаемый тип файла.",
			"error.unknownFile": "Не удалось найти ссылки на файлы. Неизвестный тип файла.",
			"progress.title": "Поиск ссылок на файлы"
		},
		"dist/languageFeatures/fixAll": {
			"autoFix.label": "Исправить все",
			"autoFix.unused.label": "Удалить весь неиспользуемый код",
			"autoFix.missingImports.label": "Добавить все недостающие импорты"
		},
		"dist/languageFeatures/jsDocCompletions": {
			"typescript.jsDocCompletionItem.documentation": "Комментарий JSDoc"
		},
		"dist/languageFeatures/organizeImports": {
			"organizeImportsAction.title": "Упорядочение импорта"
		},
		"dist/languageFeatures/quickFix": {
			"fixAllInFileLabel": "{0} (Исправить все в файле)"
		},
		"dist/languageFeatures/refactor": {
			"refactoringFailed": "Не удалось применить рефакторинг",
			"extractConstant.disabled.title": "Извлечение в константу",
			"extractConstant.disabled.reason": "Невозможно извлечь выбранные параметры",
			"extractFunction.disabled.title": "Извлечение в функцию",
			"extractFunction.disabled.reason": "Невозможно извлечь выбранные параметры",
			"refactor.documentation.title": "Дополнительные сведения о рефакторингах JS/TS"
		},
		"dist/languageFeatures/rename": {
			"fileRenameFail": "Ошибка при переименовании файла"
		},
		"dist/tsServer/versionStatus": {
			"projectQuickPick.placeholder": "Сведения о проекте TypeScript",
			"projectQuickPick.version.label": "Выберите версию TypeScript…",
			"projectQuickPick.version.description": "[текущий = {0}]",
			"projectQuickPick.project.create": "Создать tsconfig",
			"projectQuickPick.project.create.description": "Этот файл не является частью проекта tsconfig/jsconfig",
			"projectQuickPick.version.goProjectConfig": "Открыть tsconfig",
			"projectQuickPick.help": "Справка по TypeScript",
			"projectInfo.name": "TypeScript: сведения о проекте"
		},
		"dist/typescriptServiceClient": {
			"noServerFound": "Путь {0} не указывает на допустимый файл программы установки tsserver. Выполняется откат до пакетной версии TypeScript.",
			"serverExitedWithError": "Языковой сервер TypeScript завершил работу с ошибкой. Сообщение об ошибке: \"{0}\".",
			"typescript.openTsServerLog.loggingNotEnabled": "Вход в TS Server отключен. Задайте \"typescript.tsserver.log\" и перезагрузите VS Code, чтобы включить ведение журнала",
			"typescript.openTsServerLog.enableAndReloadOption": "Войдите и перезагрузите TS server",
			"typescript.openTsServerLog.noLogFile": "Сервер TS не начал ведение журнала.",
			"openTsServerLog.openFileFailedFailed": "Не удалось открыть файл журнала сервера TS",
			"serverDiedReportIssue": "Сообщить об ошибке",
			"serverDiedAfterStart": "Языковая служба TypeScript пять раз завершила работу сразу после запуска. Служба не будет перезапущена.",
			"serverDied": "Языковая служба TypeScript пять раз непредвиденно завершила работу за последние пять минут.",
			"serverDiedOnce": "Языковая служба TypeScript неожиданно завершила работу.",
			"serverLoading.progress": "Инициализация компонентов языка JS/TS"
		},
		"dist/tsServer/versionManager": {
			"selectTsVersion": "Выберите версию TypeScript, используемую для языковых функций JavaScript и TypeScript.",
			"useVSCodeVersionOption": "Использовать версию VS Code",
			"useWorkspaceVersionOption": "Использовать версию рабочей области",
			"allow": "Разрешить",
			"dismiss": "Закрыть",
			"suppress prompt": "Никогда в этой рабочей области",
			"promptUseWorkspaceTsdk": "Эта рабочая область содержит версию TypeScript. Вы хотите использовать версию TypeScript рабочей области для функций языка TypeScript и JavaScript?",
			"learnMore": "Дополнительные сведения об управлении версиями TypeScript"
		},
		"dist/utils/logger": {
			"channelName": "TypeScript"
		},
		"dist/utils/typingsStatus": {
			"installingPackages": "Получение данных для повышения эффективности IntelliSense TypeScript",
			"typesInstallerInitializationFailed.doNotCheckAgain": "Больше не показывать",
			"typesInstallerInitializationFailed.title": "Не удалось установить файлы типизации для языка JavaScript. Убедитесь, что NPM установлен или укажите путь к файлу 'typescript.npm' в параметрах среды пользователя. Дополнительные сведения см. [здесь]({0})."
		},
		"dist/utils/largeProjectStatus": {
			"statusExclude": "TypeScript: настройка исключений",
			"hintExclude": "Чтобы включить языковые функции JavaScript/TypeScript IntelliSense во всем проекте, исключите папки с большим числом файлов, например: {0}.",
			"hintExclude.generic": "Чтобы включить языковые функции JavaScript/TypeScript IntelliSense во всем проекте, исключите большие папки с исходными файлами, с которыми вы не работаете.",
			"large.label": "Настройка исключений",
			"hintExclude.tooltip": "Чтобы включить языковые функции JavaScript/TypeScript IntelliSense во всем проекте, исключите большие папки с исходными файлами, с которыми вы не работаете."
		},
		"dist/languageFeatures/updatePathsOnRename": {
			"renameProgress.title": "Проверка обновления для импортируемых данных JS/TS",
			"prompt": "Обновить импорты для \"{0}\"?",
			"promptMoreThanOne": "Обновить импорты для следующих файлов ({0})?",
			"reject.title": "Нет",
			"accept.title": "Да",
			"always.title": "Всегда обновлять импорты автоматически",
			"never.title": "Никогда не обновлять импорты автоматически",
			"moreFile": "...1 дополнительный файл не показан",
			"moreFiles": "...не показано дополнительных файлов: {0}"
		},
		"dist/tsServer/serverProcess.electron": {
			"noServerFound": "Путь {0} не указывает на допустимый файл программы установки tsserver. Выполняется откат до пакетной версии TypeScript."
		},
		"dist/task/taskProvider": {
			"badTsConfig": "Задача TypeScript в файле tasks.json содержит \"\\\\\". В конфигурации tsconfig задач TypeScript необходимо использовать \"/\"",
			"buildTscLabel": "сборка — {0}",
			"buildAndWatchTscLabel": "отслеживание — {0}"
		}
	}
}